<?php

/**
 * @file
 * Contains social_virtual_event_bbb.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\virtual_event_bbb\VirtualEventBBB;
use BigBlueButton\Parameters\JoinMeetingParameters;
use Drupal\group\Entity\GroupInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\virtual_events\Entity\VirtualEventsEventEntity;
use Drupal\Core\Datetime\DrupalDateTime;

/*
function social_virtual_event_bbb_theme($existing, $type, $theme, $path) {
  return [
    'node__event__joinbutton_block' => [
      'template' => 'node--event--joinbutton-block',
      'base hook' => 'node',
    ],
  ];
}
*/

/**
 * Implements hook_form_alter()
 */
function social_virtual_event_bbb_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Don't perform on delete forms
  if (strpos($form_id, '_delete') !== FALSE) {
    return;
  }

  $virtualEventsCommon = \Drupal::service('virtual_events.common');
  

  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity_type = $entity->getEntityTypeId();
    $entity_bundle = $entity->bundle();
    $entity_id = $entity->id();
    $event = $virtualEventsCommon->getEventByRefernce($entity_type, $entity_id);

    $event_source_data = [];
    $enabled_source = "";
    if ($event) {
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'social_virtual_event_bbb_update_event_form_submit';
        }
      }
    }
  }
    

  
  
  
  // We want required fields for enroll dialog
  if ($form_id === 'event_an_enroll_form') {
    // Make First and Last name required
    $form['field_first_name']['#required'] = TRUE;
    $form['field_last_name']['#required'] = TRUE;
  }
  
  if ($form_id === 'virtual_event_bbb_link_form') {



    $token = \Drupal::request()->query->get('token');
    $socialVirtualEventsCommon = \Drupal::service('social_virtual_event_bbb.common');
    $user = \Drupal::currentUser();
    $args = $form_state->getBuildInfo()["args"];
    $event = $args[0];
    $display_options = $args[1];
    $group_member = FALSE;

    $uid = $user->id();
    $nid = $event->getEntity()->id();
    $node_type = $event->getEntity()->getType();
    $start_event = $event->getEntity()->field_event_date->date;
    $end_event = $event->getEntity()->field_event_date_end->date;
    $font_size = $socialVirtualEventsCommon->getFontSize();
    if (!$font_size) {
      $font_size = 28;
    }    
    
    $current_date = time();

    // Important to set default    
    $form['submit']['#access'] = TRUE;
    $form['submit']['#attributes']['class'][] = 'btn-block';

    $source_data = $event->getSourceData();


    $join_button_visible_before = $source_data['settings']['join_button_visible_before'];
  
    if($join_button_visible_before != 'show_always_open') {
      $join_button_visible_before_seconds = $source_data['settings']['join_button_visible_before'] * 60;
      $show_button_at = $start_event->getTimestamp() - $join_button_visible_before_seconds;
    // Attach Javascript and Setting
    if ($show_button_at > $current_date) {
      $form['submit']['#access'] = TRUE;  
      $form['submit']['#attributes']['class'][] = 'visually-hidden';
      $countdown_settings = [
        'unixtimestamp' => $show_button_at,
        'fontsize' => $font_size
      ];
      $form['timer'] = [
        '#markup' => '<div id="jquery-countdown-timer"></div><div id="jquery-countdown-timer-note"></div>',
      ];
      $form['#attached']['library'][] = 'social_virtual_event_bbb/countdown.timer';
      $form['#attached']['drupalSettings']['countdown'] = $countdown_settings;    
    }
  }

  $join_button_visible_after = $source_data['settings']['join_button_visible_after'];
    if($join_button_visible_after != 'show_always_open') {
    $join_button_visible_after_seconds = $source_data['settings']['join_button_visible_after'] * 60;
    $hide_button_at = $end_event->getTimestamp() + $join_button_visible_after_seconds;
    // We do not want to hide the button, as long as the 
    // event did not start    
      if ($current_date > $hide_button_at) {
        $form['submit']['#access'] = FALSE;
      }
      else {   
        $form['submit']['#access'] = TRUE;   
        $timer_settings = [
          'unixtimestamp' => $hide_button_at,
        ];
        $form['#attached']['library'][] = 'social_virtual_event_bbb/clock.timer';
        $form['#attached']['drupalSettings']['timer'] = $timer_settings;
      }
    }

    // Make sure we act on event nodes only
    // Make sure Event organizers are not effected
    if (isset($node_type) && $node_type === 'event' && !social_event_manager_or_organizer()) {

      if (isset($token)) {
        $token_value = $token;
      }
      else {
        $token_value = '';
      }

      // Add a hidden field for the token
      $form['token_value'] = [
        '#type' => 'hidden',
        '#value' => $token_value
      ];

      if (!$user->isAnonymous()) {

        $event_enrollment = \Drupal::entityTypeManager()->getStorage('event_enrollment');
        $groupHelperService = \Drupal::service('social_group.helper_service');
        $entityTypeManager = \Drupal::service('entity_type.manager');

        // Check if user has enrolled the event
        $enrolled = $event_enrollment->loadByProperties([
          'field_account' => $uid,
          'field_event' => $nid,
          'field_enrollment_status' => 1,
        ]);

        // Check if user is group member        
        // Get the group
        $gid_from_entity = $groupHelperService->getGroupFromEntity([
          'target_type' => 'node',
          'target_id' => $event->id(),
        ]);  
          
        if ($gid_from_entity !== NULL) {
            /** @var \Drupal\group\Entity\GroupInterface $group */
            $group = $entityTypeManager
              ->getStorage('group')
              ->load($gid_from_entity);
        }

        if ($group instanceOf GroupInterface) {
          $member = $group->getMember($user);
          if ($member) {
            $group_member = TRUE;
          }
        }    
        

        // Don't show the join meeting button
        if (!$enrolled || !$group_member) {
          unset($form['submit']);
        }

      } 
      else {   
        /** @var \Drupal\social_event_an_enroll\EventAnEnrollManager $service */
        $an_enrolled = \Drupal::service('social_event_an_enroll.service')->tokenExists($token, $nid);  
       
        
        if (!$an_enrolled) {
          unset($form['submit']);
        } 
      }
    } 

    // We need our custom submit handler for events only
    if (isset($node_type) && $node_type === 'event') { 
      // Define custom submit handler for enrollment service
      $form['#submit'] = ['social_virtual_event_bbb_submit_handler'];
    }
    
  }
}

/**
 * Custom form submit handler for joining bbb meeting.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function social_virtual_event_bbb_submit_handler(array $form, FormStateInterface $form_state) {

  $BBBKeyPluginManager = \Drupal::service('plugin.manager.bbbkey_plugin');
  $virtualEventsCommon = \Drupal::service('virtual_events.common');
  $user = \Drupal::currentUser();
  $event = $virtualEventsCommon->getEventById($form_state->getValue('event_id'));
  $token_value = $form_state->getValue('token_value');

  // We need to read the token for an. users
  //$token = \Drupal::request()->query->get('token');
  
  

  if ($event) {
    /* Check if meeting is not active,
    recreate it before showing the join url */
    $event = $event->reCreate();

    $entity = $event->getEntity();
    $enabled_event_source = $event->getEnabledSourceKey();
    $event_config = $event->getVirtualEventsConfig($enabled_event_source);
    $source_config = $event_config->getSourceConfig($enabled_event_source);
    $source_data = $event->getSourceData();
    $eventSourcePlugin = $event->getEventSourcePlugin();
    if(!isset($source_config["data"]["key_type"])){
      drupal_set_message(t("Couldn't create meeting! please contact system administrator."), 'error');
    }

    $keyPlugin = $BBBKeyPluginManager->createInstance($source_config["data"]["key_type"]);
    $keys = $keyPlugin->getKeys($source_config);

    $apiUrl = $keys["url"];
    $secretKey = $keys["secretKey"];
    $bbb = new VirtualEventBBB($secretKey, $apiUrl);

    /* Check access for current entity, if user can update
    then we can consider the user as moderator,
    otherwise we consider the user as normal attendee.
     */
    if ($entity->access('update')) {
      $joinMeetingParams = new JoinMeetingParameters($event->id(), $user->getDisplayName(), $source_data["settings"]["moderatorPW"]);
    }
    elseif ($entity->access('view')) {
      if ($user->isAnonymous()) {
        // Get Display name for anonymous users
        $display_name = social_virtual_event_bbb_get_name_for_unauthenticated_users($token_value, $entity->id());
        if ($display_name) {
          $joinMeetingParams = new JoinMeetingParameters($event->id(), $display_name, $source_data["settings"]["attendeePW"]);
        }
        else {
          $joinMeetingParams = new JoinMeetingParameters($event->id(), 'Guest', $source_data["settings"]["attendeePW"]);
        }        
      }
      else {
        $joinMeetingParams = new JoinMeetingParameters($event->id(), $user->getDisplayName(), $source_data["settings"]["attendeePW"]);
      }
    }
    
    try {
      $joinMeetingParams->setRedirect(TRUE);

      $url = $bbb->getJoinMeetingURL($joinMeetingParams);

      $form_state->setResponse(new TrustedRedirectResponse($url));

    } catch (\RuntimeException $exception) {
      watchdog_exception('virtual_event_bbb', $exception, $exception->getMessage());
      drupal_set_message(t("Couldn't get meeting join link! please contact system administrator."), 'error');
    } catch (Exception $exception) {
      watchdog_exception('virtual_event_bbb', $exception, $exception->getMessage());
      drupal_set_message(t("Couldn't get meeting join link! please contact system administrator."), 'error');
    }
  }
  else {
    drupal_set_message(t("Couldn't find meeting! please contact system administrator."), 'error');
  }

}

/**
 * Implements hook_virtual_events_virtual_event_formatter_plugin_info_alter()
 * As defined in the PluginManager 
 */
function social_virtual_event_bbb_virtual_events_virtual_event_formatter_plugin_info_alter(array &$info) {
  // Time to get schwifty in here
  if (isset($info['virtual_event_bbb_meeting'])) {
    $info['virtual_event_bbb_meeting']['class'] = '\Drupal\social_virtual_event_bbb\Plugin\VirtualEvent\FormatterPlugin\SocialVirtualEventBBBFormatter';
  }
}

/**
 * Implements hook_virtual_events_virtual_event_source_plugin_info_alter()
 * As defined in the PluginManager 
 */
function social_virtual_event_bbb_virtual_events_virtual_event_source_plugin_info_alter(array &$info) {
  // Time to get schwifty in here 
  if(isset($info['virtual_event_bbb'])) {
    $info['virtual_event_bbb']['class'] = 'Drupal\social_virtual_event_bbb\Plugin\VirtualEvent\SourcePlugin\SocialVirtualEventBBBSource';
  }
}

/**
 * Helper to get display name for
 * annonymous users 
 */
function social_virtual_event_bbb_get_name_for_unauthenticated_users($token, $nid) {

  $display_name = [];
  $an_enrolled = \Drupal::service('social_event_an_enroll.service')->tokenExists($token, $nid);
  
  // Check if we have an anonymous account
  if ($an_enrolled) {
    $storage = \Drupal::entityTypeManager()->getStorage('event_enrollment');
    // Check if user has enrolled the event
    $enrolled = $storage->loadByProperties([
      'field_token' => $token,
      'field_event' => $nid,
      'field_enrollment_status' => 1,
    ]);

    if ($user_enrolled = array_pop($enrolled)) {

      if (isset($user_enrolled->field_first_name)) {
        if (!empty($user_enrolled->field_first_name->value)) {
          $display_name['first_name'] = $user_enrolled->field_first_name->value;
        }
      }
      if (isset($user_enrolled->field_last_name)) {
        if (!empty($user_enrolled->field_last_name->value)) {
          $display_name['last_name'] = $user_enrolled->field_last_name->value;
        }
      }

      // In case we have first and last name
      if (isset($display_name['first_name']) && isset($display_name['last_name'])) {
        return $display_name['first_name'] . ' ' . $display_name['last_name'];
      }
      // only first name given
      elseif (isset($display_name['first_name']) && !isset($display_name['last_name'])) {
        return $display_name['first_name'];
      }
      // only last name given
      elseif (!isset($display_name['first_name']) && isset($display_name['last_name'])) {
        return $display_name['last_name'];
      }
      else {
        return FALSE;
      }

    }
    
  }
  
  return FALSE;

}

/*
 * Implements hook_config_schema_info_alter()
 */
function social_virtual_event_bbb_config_schema_info_alter(&$definitions) {
  if(isset($definitions['virtual_events.event.virtual_event_bbb'])) {
    $definitions['virtual_events.event.virtual_event_bbb']['mapping']['join_button_visible_before'] = [
      'type' => 'string',
      'lable' => 'Join button visible before'
    ];
    $definitions['virtual_events.event.virtual_event_bbb']['mapping']['join_button_visible_after'] = [
      'type' => 'string',
      'lable' => 'Join button visible after'
    ];
    $definitions['virtual_events.event.virtual_event_bbb']['mapping']['mute_on_start'] = [
      'type' => 'boolean',
      'lable' => 'Mute on start'
    ];
    $definitions['virtual_events.event.virtual_event_bbb']['mapping']['recording_access'] = [
      'type' => 'sequence',
      'label' => 'Recording access',
      'option' => [
        'type' => 'string',
        'label' => 'Option'
      ]
    ];
  }
}

/**
 * Submit handler for entity form.
 *
 * This will update an existing bbb meeting
 * and save meeting data to existing bbb meeting entity.
 */
function social_virtual_event_bbb_update_event_form_submit(array $form, FormStateInterface $form_state) {
  $virtualEventsCommon = \Drupal::service('virtual_events.common');
  $virtualEventsSourcePluginManager = \Drupal::service('plugin.manager.virtual_event_source_plugin');
  $virtualEventsPrePluginManager = \Drupal::service('plugin.manager.virtual_event_pre_handle_plugin');
  $virtualEventsPostPluginManager = \Drupal::service('plugin.manager.virtual_event_post_handle_plugin');
  $postHandlers = $virtualEventsPostPluginManager->getDefinitions();
  $preHandlers = $virtualEventsPrePluginManager->getDefinitions();
  $entity = $form_state->getFormObject()->getEntity();
  $entity_type = $entity->getEntityTypeId();
  $entity_bundle = $entity->bundle();
  $entity_id = $entity->id();
  $eventConfig = $virtualEventsCommon->getVirtualEventsConfig($entity_bundle);
  $event = $virtualEventsCommon->getEventByRefernce($entity_type, $entity_id);
  
  $sources = $eventConfig->get("sources");

  $sourcesData = $form_state->getValue("virtual_events_sources");
  $sourcesResults = [];
  $enable_virtual_session = $sourcesData["enable_virtual_session"];

  if ($enable_virtual_session && $event) {

    $sourceKey = $event->getEnabledSourceKey();
    $settings = $sourcesData[$sourceKey]['settings'];
    $updatedSource = [
      'enabled' => TRUE,
      'settings' => $settings
    ];

    // Update the Event Entity
    $eventEntity = \Drupal::entityTypeManager()->getStorage('virtual_events_event_entity')->load($event->id());
    $eventEntity->setSourceData($sourceKey,$updatedSource);
    $eventEntity->save();   
    

  }
}

